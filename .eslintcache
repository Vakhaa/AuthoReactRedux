[{"D:\\VisualStudio\\project\\AuthoReactRedux\\client\\src\\index.js":"1","D:\\VisualStudio\\project\\AuthoReactRedux\\client\\src\\App.js":"2","D:\\VisualStudio\\project\\AuthoReactRedux\\client\\src\\reportWebVitals.js":"3","D:\\VisualStudio\\project\\AuthoReactRedux\\client\\src\\Actions\\userActions.jsx":"4","D:\\VisualStudio\\project\\AuthoReactRedux\\client\\src\\Components\\SignUp.jsx":"5","D:\\VisualStudio\\project\\AuthoReactRedux\\client\\src\\Components\\Login.jsx":"6","D:\\VisualStudio\\project\\AuthoReactRedux\\client\\src\\Store\\index.jsx":"7","D:\\VisualStudio\\project\\AuthoReactRedux\\client\\src\\Reducer\\index.jsx":"8"},{"size":633,"mtime":1611578803163,"results":"9","hashOfConfig":"10"},{"size":2471,"mtime":1611573763621,"results":"11","hashOfConfig":"10"},{"size":362,"mtime":499162500000,"results":"12","hashOfConfig":"10"},{"size":5167,"mtime":1611573652390,"results":"13","hashOfConfig":"10"},{"size":2372,"mtime":1611579441424,"results":"14","hashOfConfig":"10"},{"size":1713,"mtime":1611579474481,"results":"15","hashOfConfig":"10"},{"size":760,"mtime":1611850019848,"results":"16","hashOfConfig":"10"},{"size":854,"mtime":1611573678423,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"11ny9kz",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":1,"source":"27","usedDeprecatedRules":"20"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"30","usedDeprecatedRules":"20"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"33","usedDeprecatedRules":"20"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"38","usedDeprecatedRules":"20"},"D:\\VisualStudio\\project\\AuthoReactRedux\\client\\src\\index.js",[],["39","40"],"D:\\VisualStudio\\project\\AuthoReactRedux\\client\\src\\App.js",[],"D:\\VisualStudio\\project\\AuthoReactRedux\\client\\src\\reportWebVitals.js",[],"D:\\VisualStudio\\project\\AuthoReactRedux\\client\\src\\Actions\\userActions.jsx",["41","42","43","44"],"﻿/*const initUser = (name) => {\r\n    return {\r\n        user: {\r\n            username: name,\r\n                avatar: \"https://robohash.org/imanewuser.png\",\r\n                    bio: \"A new user to the app.\"\r\n        },\r\n        jwt: \"aaaaaaa.bbbbbbbb.ccccccc\"\r\n    }\r\n}*/\r\n\r\nconst initUser = (name, password) => {\r\n    return {\r\n        username: name,\r\n        password: password,\r\n        avatar: \"https://robohash.org/imanewuser.png\",\r\n        bio: \"A new user to the app.\"\r\n    }\r\n}\r\n\r\nlet users = [\r\n    initUser(\"Init\", \"admin\"),\r\n    initUser(\"Init2\", \"123\")\r\n]\r\n\r\nconst loginUser = userObj => ({\r\n    type: 'LOGIN_USER',\r\n    payload: userObj\r\n})\r\n\r\nconst loginFailed = message => ({\r\n    type: 'LOGIN_FAIELD',\r\n    payload: {\r\n        isFailed: true,\r\n        message: message\r\n    }\r\n})\r\n\r\nconst loginSucces = (message) => ({\r\n    type: 'LOGIN_SUCCES',\r\n    payload: {\r\n        isFailed: false,\r\n        message: message\r\n    }\r\n})\r\n\r\nconst signupFailed = (message) => ({\r\n    type: 'SIGNUP_FAIELD',\r\n    payload: {\r\n        isFailed: true,\r\n        message: message\r\n    }\r\n})\r\n\r\nconst signupSucces = (message) => ({\r\n    type: 'SIGNUP_SUCCES',\r\n    payload: {\r\n        isFailed: false,\r\n        message: message\r\n    }\r\n})\r\n\r\nexport const logoutUser = () => ({\r\n    type: 'LOGOUT_USER'\r\n})\r\n\r\nexport const logoutSuccess = () => ({\r\n    type: 'LOGOUT_SUCCES',\r\n    payload: {\r\n        isFailed: false,\r\n        message: \"Log out\"\r\n    }\r\n})\r\n\r\nconst validateLogin = (username, dispatch) => {\r\n    let isNotChek = true\r\n    users.map(u => {\r\n        if (u.username === username) {\r\n            dispatch(signupFailed(\"Login is used\"))\r\n            isNotChek = false\r\n        }\r\n    })\r\n    return isNotChek\r\n}\r\n\r\nconst validatePassword = (password, dispatch) => {\r\n    let isNotChek = true\r\n    users.map(u => {\r\n        if (u.password === password) {\r\n            dispatch(signupFailed(\"Password is used\"))\r\n            isNotChek = false\r\n        }\r\n    })\r\n    return isNotChek\r\n}\r\n\r\nconst addUser = (user, dispatch) => {\r\n    if (validateLogin(user.username, (items) => dispatch(items))) {\r\n        if (validatePassword(user.password, (items) => dispatch(items))) {\r\n            dispatch(signupSucces(\"Sign up is successful\"))\r\n            users.push(user)\r\n        //dispatch(loginUser(user))\r\n        }\r\n    }\r\n}\r\n\r\nexport const userPostFetch = user => {\r\n    return dispatch => {\r\n        return (\r\n            addUser(user, (index) => dispatch(index))           \r\n        )\r\n    }\r\n    /*fetch(\"http://localhost:3000/api/v1/users\", {\r\n    method: \"POST\",\r\n    headers: {\r\n        'Content-Type': 'application/json',\r\n        Accept: 'application/json',\r\n    },\r\n    body: JSON.stringify({ user })\r\n})\r\n    .then(resp => resp.json())\r\n    .then(data => {\r\n        if (data.message) {\r\n            //Тут прописываем логику\r\n        } else {\r\n            localStorage.setItem(\"token\", data.jwt)\r\n            dispatch(loginUser(data.user))\r\n        }\r\n    })*/\r\n}\r\n\r\nexport const userLoginFetch = user => {\r\n    return dispatch => {\r\n        return (\r\n            users.map(u => {\r\n                if (u.username === user.username) {\r\n                    if (u.password === user.password) {\r\n                        dispatch(loginSucces(\"Login is successful\"))\r\n                        dispatch(loginUser(user))\r\n                    } else {\r\n                        dispatch(loginFailed(\"Password is failed\"))\r\n                    }\r\n                } else {\r\n                        dispatch(loginFailed(\"Login is failed\"))\r\n                    }\r\n                })\r\n            )\r\n        /*fetch(\"http://localhost:3000/api/v1/login\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                Accept: 'application/json',\r\n            },\r\n            body: JSON.stringify({ user })\r\n        })\r\n            .then(resp => resp.json())\r\n            .then(data => {\r\n                if (data.message) {\r\n                    //тут ваша логика\r\n                } else {\r\n                    localStorage.setItem(\"token\", data.jwt)\r\n                    dispatch(loginUser(data.user))\r\n                }\r\n            })*/\r\n    }\r\n}\r\n\r\nexport const getProfileFetch = () => {\r\n    return dispatch => {\r\n        const token = localStorage.token;\r\n        if (token) {\r\n            return dispatch(loginUser(initUser))\r\n        /*fetch(\"http://localhost:3000/api/v1/profile\", {\r\n                method: \"GET\",\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    Accept: 'application/json',\r\n                    'Authorization': `Bearer ${token}`\r\n                }\r\n            })\r\n                .then(resp => resp.json())\r\n                .then(data => {\r\n                    if (data.message) {\r\n                        // Будет ошибка если token не дествительный\r\n                        localStorage.removeItem(\"token\")\r\n                    } else {\r\n                        dispatch(loginUser(data.user))\r\n                    }\r\n                })*/\r\n        }\r\n    }\r\n}","D:\\VisualStudio\\project\\AuthoReactRedux\\client\\src\\Components\\SignUp.jsx",["45"],"﻿import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { userPostFetch } from '../Actions/userActions.jsx';\r\n\r\nclass Signup extends Component {\r\n    state = {\r\n        username: \"\",\r\n        password: \"\",\r\n        avatar: \"\",\r\n        bio: \"\"\r\n    }\r\n\r\n    handleChange = event => {\r\n        this.setState({\r\n            [event.target.name]: event.target.value\r\n        });\r\n    }\r\n\r\n    handleSubmit = event => {\r\n        event.preventDefault()\r\n        this.props.userPostFetch(this.state)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form onSubmit={this.handleSubmit} className=\"form-signin\">\r\n                <h2 className=\"h3 mb-3 font-weight-normal\">Sign Up</h2>\r\n                <label>Username</label>\r\n                <input\r\n                    className=\"form-control\"\r\n                    name='username'\r\n                    placeholder='Username'\r\n                    value={this.state.username}\r\n                    onChange={this.handleChange}\r\n                /><br />\r\n\r\n                <label>Password</label>\r\n                <input\r\n                    className=\"form-control\"\r\n                    type='password'\r\n                    name='password'\r\n                    placeholder='Password'\r\n                    value={this.state.password}\r\n                    onChange={this.handleChange}\r\n                /><br />\r\n\r\n                <label>Avatar</label>\r\n                <input\r\n                    className=\"form-control\"\r\n                    name='avatar'\r\n                    placeholder='Avatar (URL)'\r\n                    value={this.state.avatar}\r\n                    onChange={this.handleChange}\r\n                /><br />\r\n\r\n                <label>Bio</label>\r\n                <textarea\r\n                    className=\"form-control\"\r\n                    name='bio'\r\n                    placeholder='Bio'\r\n                    value={this.state.bio}\r\n                    onChange={this.handleChange}\r\n                /><br />\r\n\r\n                <input\r\n                    className=\"btn btn-lg btn-primary btn-block\"\r\n                    type='submit' value=\"Submit\"/>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    userPostFetch: userInfo => dispatch(userPostFetch(userInfo))\r\n})\r\n\r\nexport default connect(null, mapDispatchToProps)(Signup);","D:\\VisualStudio\\project\\AuthoReactRedux\\client\\src\\Components\\Login.jsx",["46"],"﻿import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { userLoginFetch } from '../Actions/userActions';\r\n\r\nclass Login extends Component {\r\n    state = {\r\n        username: \"\",\r\n        password: \"\"\r\n    }\r\n\r\n    handleChange = event => {\r\n        this.setState({\r\n            [event.target.name]: event.target.value\r\n        });\r\n    }\r\n\r\n    handleSubmit = event => {\r\n        event.preventDefault()\r\n        this.props.userLoginFetch(this.state)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form onSubmit={this.handleSubmit} className=\"form-signin\">\r\n                <h2 className=\"h3 mb-3 font-weight-normal\">Login</h2>\r\n\r\n                <label>Username</label>\r\n                <input\r\n                    className=\"form-control\"\r\n                    name='username'\r\n                    placeholder='Username'\r\n                    value={this.state.username}\r\n                    onChange={this.handleChange}\r\n                /><br />\r\n\r\n                <label>Password</label>\r\n                <input\r\n                    className=\"form-control\"\r\n                    type='password'\r\n                    name='password'\r\n                    placeholder='Password'\r\n                    value={this.state.password}\r\n                    onChange={this.handleChange}\r\n                /><br />\r\n\r\n                <input\r\n                    className=\"btn btn-lg btn-primary btn-block\"\r\n                    type='submit' value=\"Submit\" />\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    userLoginFetch: userInfo => dispatch(userLoginFetch(userInfo))\r\n})\r\n\r\nexport default connect(null, mapDispatchToProps)(Login);","D:\\VisualStudio\\project\\AuthoReactRedux\\client\\src\\Store\\index.jsx",["47"],"D:\\VisualStudio\\project\\AuthoReactRedux\\client\\src\\Reducer\\index.jsx",["48"],"﻿\r\nconst initialState = {\r\n    currentUser: {},\r\n    failed: {}\r\n}\r\n\r\nexport default function reducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case 'SIGNUP_FAIELD':\r\n            return { ...state, failed: action.payload }\r\n        case 'SIGNUP_SUCCES':\r\n            return { ...state, failed: action.payload }\r\n        case 'LOGIN_FAIELD':\r\n            return { ...state, failed: action.payload }\r\n        case 'LOGIN_SUCCES':\r\n            return {...state, failed: action.payload }\r\n        case 'LOGIN_USER':\r\n            return {\r\n                ...state, currentUser: action.payload\r\n            }\r\n        case 'LOGOUT_USER':\r\n            return { ...state, currentUser: {} }\r\n        case 'LOGOUT_SUCCES':\r\n            return { ...state, failed: action.payload }\r\n        default:\r\n            return state;\r\n    }\r\n}",{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","severity":1,"message":"54","line":1,"column":1,"nodeType":"55","messageId":"56","fix":"57"},{"ruleId":"58","severity":1,"message":"59","line":77,"column":17,"nodeType":"60","messageId":"61","endLine":77,"endColumn":19},{"ruleId":"58","severity":1,"message":"59","line":88,"column":17,"nodeType":"60","messageId":"61","endLine":88,"endColumn":19},{"ruleId":"58","severity":1,"message":"59","line":135,"column":25,"nodeType":"60","messageId":"61","endLine":135,"endColumn":27},{"ruleId":"53","severity":1,"message":"54","line":1,"column":1,"nodeType":"55","messageId":"56","fix":"62"},{"ruleId":"53","severity":1,"message":"54","line":1,"column":1,"nodeType":"55","messageId":"56","fix":"63"},{"ruleId":"53","severity":1,"message":"54","line":1,"column":1,"nodeType":"55","messageId":"56","fix":"64"},{"ruleId":"53","severity":1,"message":"54","line":1,"column":1,"nodeType":"55","messageId":"56","fix":"65"},"no-native-reassign",["66"],"no-negated-in-lhs",["67"],"unicode-bom","Unexpected Unicode BOM (Byte Order Mark).","Program","unexpected",{"range":"68","text":"69"},"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside",{"range":"70","text":"69"},{"range":"71","text":"69"},{"range":"72","text":"69"},{"range":"73","text":"69"},"no-global-assign","no-unsafe-negation",[-1,0],"",[-1,0],[-1,0],[-1,0],[-1,0]]